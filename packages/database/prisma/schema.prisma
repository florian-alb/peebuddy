generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String    @db.Uuid
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
  @@map("verification")
}


model Picture {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  toilet_id  String?   @db.Uuid
  name       String?   @db.VarChar(255)
  url        String?   @db.VarChar(255)
  updated_at DateTime? @db.Timestamp(6)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  Toilet     Toilet?   @relation(fields: [toilet_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pictures_toilet_id_toilets_id_fk")
}

model Review {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating     Int       @db.SmallInt
  comment    String?
  toilet_id  String?   @db.Uuid
  user_id    String?   @db.Uuid
  updated_at DateTime? @db.Timestamp(6)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  Toilet     Toilet?   @relation(fields: [toilet_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reviews_toilet_id_toilets_id_fk")
  User       User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reviews_user_id_users_id_fk")
}

model Toilet {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  longitude   Decimal   @db.Decimal
  latitude    Decimal   @db.Decimal
  is_free     Boolean
  is_public   Boolean
  is_handicap Boolean
  is_commerce Boolean
  is_verified Boolean
  updated_at  DateTime? @db.Timestamp(6)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  deleted_at  DateTime? @db.Timestamp(6)
  Picture     Picture[]
  Review      Review[]
}

model User {
  id            String    @id @db.Uuid
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  roles         Roles?
  updated_at    DateTime? @db.Timestamp(6)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  deleted_at    DateTime? @db.Timestamp(6)
  Review        Review[]
  @@unique([email])
  @@map("user")
}

enum Roles {
  admin
  user
}

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  engineType    = "binary"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime? @db.Timestamp(6)
  deletedAt     DateTime? @db.Timestamp(6)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @db.Timestamp(6)
  deleted_at    DateTime? @db.Timestamp(6)
  role          Roles?    @default(user)
  Review        Review[]
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String    @id
  expiresAt DateTime
  token     String    @unique
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  ipAddress String?
  userAgent String?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now()) @db.Timestamp(6)
  updatedAt             DateTime? @db.Timestamp(6)
  deletedAt             DateTime? @db.Timestamp(6)
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  updatedAt  DateTime? @db.Timestamp(6)
  deletedAt  DateTime? @db.Timestamp(6)

  @@map("verification")
}

model Toilet {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  longitude   String
  latitude    String
  is_free     Boolean   @default(false)
  is_public   Boolean   @default(false)
  is_handicap Boolean   @default(false)
  is_commerce Boolean   @default(false)
  is_verified Boolean   @default(false)
  updated_at  DateTime? @db.Timestamp(6)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  deleted_at  DateTime? @db.Timestamp(6)
  Picture     Picture[]
  Review      Review[]
}

model Picture {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  toilet_id   String?   @db.Uuid
  name        String?   @db.VarChar(255)
  url         String?   @db.VarChar(255)
  updated_at  DateTime? @db.Timestamp(6)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  deleted_at  DateTime? @db.Timestamp(6)
  is_verified Boolean   @default(false)
  Toilet      Toilet?   @relation(fields: [toilet_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pictures_toilet_id_toilets_id_fk")
}

model Review {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating      Int       @db.SmallInt
  comment     String?
  toilet_id   String?   @db.Uuid
  user_id     String?
  updated_at  DateTime? @db.Timestamp(6)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  deleted_at  DateTime? @db.Timestamp(6)
  is_verified Boolean   @default(false)
  Toilet      Toilet?   @relation(fields: [toilet_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reviews_toilet_id_toilets_id_fk")
  User        User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reviews_user_id_users_id_fk")
}

enum Roles {
  admin
  user
}
